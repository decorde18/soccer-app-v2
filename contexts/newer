// GameContext.js
"use client";

import { mockGame } from "@/mockData";
import React, {
  createContext,
  useContext,
  useState,
  useCallback,
  useEffect,
  useMemo,
} from "react";

const GAME_STAGES = {
  BEFORE_START: "before_start",
  DURING_PERIOD: "during_period",
  BETWEEN_PERIODS: "between_periods",
  IN_STOPPAGE: "in_stoppage",
  END_GAME: "end_game",
};

const DEFAULT_GAME_SETTINGS = {
  periodCount: 2,
  periodDuration: 2400, // 40 min in seconds
  hasOvertime: false,
  overtimePeriods: 2,
  overtimeDuration: 600, // 10 min in seconds
  hasShootout: true,
  clockDirection: "up", // 'up' or 'down'
};

const GameContext = createContext();

// Move initialization outside component to avoid SSR issues
function initializeGame(settings = DEFAULT_GAME_SETTINGS) {
  return {
    id: 1,
    settings: { ...DEFAULT_GAME_SETTINGS, ...settings },
    stage: GAME_STAGES.BEFORE_START,
    periods: [],
    stoppages: [],
    currentPeriodIndex: -1,
    currentStoppageIndex: -1,
    firstPeriodStartTime: null,
  };
}

function getInitialGameState() {
  // Server-side: return initialized game
  if (typeof window === "undefined") {
    return initializeGame();
  }

  // Client-side: try to load from localStorage
  try {
    const stored = window.localStorage.getItem("currentGame");
    if (stored) {
      const parsed = JSON.parse(stored);
      // Validate that parsed data has required structure
      if (parsed && parsed.id) {
        return parsed;
      }
    }
    // If we have mockGame, use it; otherwise initialize
    return mockGame || initializeGame();
  } catch (error) {
    console.error("Error loading game from storage:", error);
    return initializeGame();
  }
}

export function GameLiveProvider({ children }) {
  const [game, setGame] = useState(getInitialGameState);
  const [isHydrated, setIsHydrated] = useState(false);

  // Handle client-side hydration
  useEffect(() => {
    setIsHydrated(true);
    // Only load from storage if we're on client and haven't already
    if (typeof window !== "undefined") {
      try {
        const stored = window.localStorage.getItem("currentGame");
        if (stored) {
          const parsed = JSON.parse(stored);
          if (parsed && parsed.id) {
            setGame(parsed);
          }
        }
      } catch (error) {
        console.error("Error loading game from storage:", error);
      }
    }
  }, []);

  // Save to localStorage whenever game changes (only on client)
  useEffect(() => {
    if (!isHydrated || typeof window === "undefined") return;

    try {
      window.localStorage.setItem("currentGame", JSON.stringify(game));
    } catch (error) {
      console.error("Error saving game to storage:", error);
    }
  }, [game, isHydrated]);

  // ==================== GAME STAGE CALCULATION ====================

  const calculateGameStage = useCallback(() => {
    if (!game.firstPeriodStartTime) {
      return GAME_STAGES.BEFORE_START;
    }

    const currentPeriod = game.periods[game.currentPeriodIndex];

    // Check if we're in an active stoppage
    if (game.currentStoppageIndex >= 0) {
      const currentStoppage = game.stoppages[game.currentStoppageIndex];
      if (currentStoppage && !currentStoppage.endTime) {
        return GAME_STAGES.IN_STOPPAGE;
      }
    }

    // Check if current period is active
    if (currentPeriod && !currentPeriod.endTime) {
      return GAME_STAGES.DURING_PERIOD;
    }

    // Check if game is over
    const totalPeriods =
      game.settings.periodCount +
      (game.settings.hasOvertime ? game.settings.overtimePeriods : 0);

    if (game.currentPeriodIndex >= totalPeriods - 1 && currentPeriod?.endTime) {
      return GAME_STAGES.END_GAME;
    }

    // Must be between periods
    return GAME_STAGES.BETWEEN_PERIODS;
  }, [game]);

  // ==================== TIME CALCULATIONS ====================

  const calculateGameTime = useCallback(() => {
    if (!game.firstPeriodStartTime) return 0;

    const now = Date.now();
    return Math.floor((now - game.firstPeriodStartTime) / 1000);
  }, [game.firstPeriodStartTime]);

  const calculateGameTimeAtTimestamp = useCallback(
    (timestamp) => {
      if (!game.firstPeriodStartTime) return 0;
      return Math.floor((timestamp - game.firstPeriodStartTime) / 1000);
    },
    [game.firstPeriodStartTime]
  );

  const getPeriodDuration = useCallback(
    (periodIndex) => {
      const regularPeriods = game.settings.periodCount;
      if (periodIndex < regularPeriods) {
        return game.settings.periodDuration;
      }
      return game.settings.overtimeDuration;
    },
    [game.settings]
  );

  const calculateStoppageTimeForPeriod = useCallback(
    (periodIndex) => {
      const period = game.periods[periodIndex];
      if (!period) return 0;

      const periodStartGameTime = calculateGameTimeAtTimestamp(
        period.startTime
      );
      const periodEndGameTime = period.endTime
        ? calculateGameTimeAtTimestamp(period.endTime)
        : calculateGameTime();

      return game.stoppages
        .filter((s) => {
          const stoppageStart = s.startTime;
          const stoppageEnd = s.endTime || calculateGameTime();
          return (
            s.shouldPausePeriodClock &&
            stoppageStart >= periodStartGameTime &&
            stoppageStart < periodEndGameTime
          );
        })
        .reduce((total, s) => {
          const duration = (s.endTime || calculateGameTime()) - s.startTime;
          return total + duration;
        }, 0);
    },
    [
      game.periods,
      game.stoppages,
      calculateGameTime,
      calculateGameTimeAtTimestamp,
    ]
  );

  const calculatePeriodTime = useCallback(() => {
    const currentPeriod = game.periods[game.currentPeriodIndex];
    if (!currentPeriod || !currentPeriod.startTime) return 0;

    const now = currentPeriod.endTime || Date.now();
    const elapsedRealTime = Math.floor((now - currentPeriod.startTime) / 1000);

    if (game.settings.clockDirection === "up") {
      // Count up: subtract stoppage time where clock should pause
      const stoppageTime = calculateStoppageTimeForPeriod(
        game.currentPeriodIndex
      );
      return elapsedRealTime - stoppageTime;
    } else {
      // Count down: period duration minus (elapsed - stoppage)
      const stoppageTime = calculateStoppageTimeForPeriod(
        game.currentPeriodIndex
      );
      const netElapsed = elapsedRealTime - stoppageTime;
      const periodDuration = getPeriodDuration(game.currentPeriodIndex);
      return Math.max(0, periodDuration - netElapsed);
    }
  }, [
    game.periods,
    game.currentPeriodIndex,
    game.settings,
    calculateStoppageTimeForPeriod,
    getPeriodDuration,
  ]);

  // ==================== GAME ACTIONS ====================

  const startGame = useCallback(async () => {
    try {
      const now = Date.now();
      const updates = {
        firstPeriodStartTime: now,
        currentPeriodIndex: 0,
        periods: [
          {
            index: 0,
            startTime: now,
            endTime: null,
          },
        ],
        stage: GAME_STAGES.DURING_PERIOD,
        updatedAt: now,
      };

      setGame((prev) => ({ ...prev, ...updates }));
    } catch (error) {
      console.error("Error starting game:", error);
    }
  }, []);

  const endPeriod = useCallback(async () => {
    try {
      const now = Date.now();
      const updatedPeriods = [...game.periods];
      updatedPeriods[game.currentPeriodIndex] = {
        ...updatedPeriods[game.currentPeriodIndex],
        endTime: now,
      };

      const updates = {
        periods: updatedPeriods,
        updatedAt: now,
      };

      setGame((prev) => ({ ...prev, ...updates }));
    } catch (error) {
      console.error("Error ending period:", error);
    }
  }, [game.periods, game.currentPeriodIndex]);

  const startNextPeriod = useCallback(async () => {
    try {
      const now = Date.now();
      const nextIndex = game.currentPeriodIndex + 1;

      const newPeriod = {
        index: nextIndex,
        startTime: now,
        endTime: null,
      };

      const updates = {
        currentPeriodIndex: nextIndex,
        periods: [...game.periods, newPeriod],
        updatedAt: now,
      };

      setGame((prev) => ({ ...prev, ...updates }));
    } catch (error) {
      console.error("Error starting next period:", error);
    }
  }, [game.currentPeriodIndex, game.periods]);

  // ============================================
  // FORMATTING UTILITIES
  // ============================================

  const formatTime = useCallback((seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, "0")}:${secs
      .toString()
      .padStart(2, "0")}`;
  }, []);

  // Memoize the context value to prevent unnecessary re-renders
  const value = useMemo(
    () => ({
      game,
      gameStage: calculateGameStage(),
      gameTime: calculateGameTime(),
      getGameTime: calculateGameTime, // Add this helper
      getPeriodTime: calculatePeriodTime,
      startGame,
      startNextPeriod,
      endPeriod,
      formatTime,
    }),
    [
      game,
      calculateGameStage,
      calculateGameTime,
      calculatePeriodTime,
      startGame,
      startNextPeriod,
      endPeriod,
      formatTime,
    ]
  );

  return <GameContext.Provider value={value}>{children}</GameContext.Provider>;
}

export function useGame() {
  const context = useContext(GameContext);
  if (!context) {
    throw new Error("useGame must be used within a GameProvider");
  }
  return context;
}

export { GAME_STAGES };
